// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	jqTestFieldNames          = builder.RawFieldNames(&JqTest{})
	jqTestRows                = strings.Join(jqTestFieldNames, ",")
	jqTestRowsExpectAutoSet   = strings.Join(stringx.Remove(jqTestFieldNames, "`id`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`"), ",")
	jqTestRowsWithPlaceHolder = strings.Join(stringx.Remove(jqTestFieldNames, "`id`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`"), "=?,") + "=?"
)

type (
	jqTestModel interface {
		Insert(ctx context.Context, data *JqTest) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*JqTest, error)
		Update(ctx context.Context, data *JqTest) error
		Delete(ctx context.Context, id int64) error
	}

	defaultJqTestModel struct {
		conn  sqlx.SqlConn
		table string
	}

	JqTest struct {
		Id   int64  `db:"id"`
		Name string `db:"name"`
	}
)

func newJqTestModel(conn sqlx.SqlConn) *defaultJqTestModel {
	return &defaultJqTestModel{
		conn:  conn,
		table: "`jq_test`",
	}
}

func (m *defaultJqTestModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultJqTestModel) FindOne(ctx context.Context, id int64) (*JqTest, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", jqTestRows, m.table)
	var resp JqTest
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultJqTestModel) Insert(ctx context.Context, data *JqTest) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?)", m.table, jqTestRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name)
	return ret, err
}

func (m *defaultJqTestModel) Update(ctx context.Context, data *JqTest) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, jqTestRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Id)
	return err
}

func (m *defaultJqTestModel) tableName() string {
	return m.table
}
